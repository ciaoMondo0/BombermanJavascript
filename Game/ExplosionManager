
class ExplosionManager {
    constructor(collidables = []) {
      this.collidables = collidables;
    }
    
    // This method handles a single explosion event.
    static handleExplosion(bomb) {
        if (!bomb.exploded) return;
        
        // Create explosion data based on bomb's properties.
        const explosion = {
          x: bomb.x - bomb.explosionRadius,
          y: bomb.y - bomb.explosionRadius,
          width: bomb.explosionRadius * 2,
          height: bomb.explosionRadius * 2,
          damage: 50
        };
        
        console.log("Explosion occurred:", explosion);
        
        if (bomb.element.parentNode) {
          bomb.element.parentNode.removeChild(bomb.element);
        }
        
        this.collidables.forEach(obj => {
          const box = obj.getCollisionBox(); 
          if (CollisionManager.isColliding(box, explosion)) {
            obj.onExplosion(explosion);
          }
        });
      }
    
    addCollidable(obj) {
      this.collidables.push(obj);
    }


    /*

    explosiveWave(bomb) {

        if(bomb.exploded === true){
    const explosion = new Explosion(this.x, this.y, this.explosionRadius, 50);
    if(bomb.element.parentNode){
      bomb.element.parentNode.removeChild(bomb.element);
    }
    return explosion;
    }*
}*/




  }
  
  window.ExplosionManager = ExplosionManager;
  